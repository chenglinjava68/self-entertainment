sharding:
  jdbc:
    datasource:
      names: order0,order1
      order0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.20.84.120:7017/order1
        username: postgres
        password: gwVFudYj
      order1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.19.132.205:7017/order0
        username: postgres
        password: 9ECSQl7N

    config:
      sharding:
        defaultKeyGeneratorClassName: com.self.entertainment.mybatis.sharding.TestKeyGenerator
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            key-generator:
              type: SNOWFLAKE
            actual-data-nodes: order$->{0..1}.t_user_$->{['201907','201908']}  #数据节点
            #            actual-data-nodes: order$->{0..1}.t_user_$->{0..1}  #数据节点
            table-strategy:  #分表策略
              #              inline:
              #                sharding-column: city_id
              #                algorithm-expression: t_user_$->{city_id % 2}
              #              complex:
              #                shardingColumns: start_time
              #                algorithmClassName: com.self.entertainment.mybatis.sharding.MyComplexShardingTable
              standard:
                shardingColumn: start_time
                rangeAlgorithmClassName: com.self.entertainment.mybatis.sharding.MyRangeShardingTable
                precise-algorithm-class-name: com.self.entertainment.mybatis.sharding.MyRangeShardingTable
            database-strategy:
              #              inline:
              #                sharding-column: test
              #                algorithm-expression: order$->{test % 2}
              complex:
                shardingColumns: start_time,site
                algorithmClassName: com.self.entertainment.mybatis.sharding.MyComplexShardingDatasource
#            table-strategy:  #分表策略
#              inline:
#                shardingColumn: sex
#                algorithm-expression: t_user${sex % 2}

mybatis-plus:
  config-location: classpath:MybatisConfig.xml
  mapper-locations: classpath:mapper/*.xml
  configuration:
    key-generators:
#spring:
#  main:
mybatis:
  config-location: classpath:MybatisConfig.xml
  mapper-locations: classpath:mapper/*.xml
#    allow-bean-definition-overriding: true